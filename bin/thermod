#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""Thermod daemon.

Copyright (C) 2017 Simone Rossetto <simros85@gmail.com>

This file is part of Thermod.

Thermod is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Thermod is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Thermod.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import logging
import argparse
import signal
import tempfile
import lockfile

from daemon import DaemonContext, pidfile
from logging.handlers import SysLogHandler, SMTPHandler
from jsonschema import ValidationError

from thermod import config, rpi
from thermod.thermometer import ScriptThermometer, ThermometerError
from thermod.heating import ScriptHeating, HeatingError
from thermod.timetable import TimeTable
from thermod.socket import ControlThread
from thermod.config import JsonValueError, ScriptError
from thermod.version import __version__ as PROGRAM_VERSION

__date__ = '2015-09-08'
__updated__ = '2017-02-13'

# TODO documentare return code
# TODO provare la generazione della documentazione con doxygen
# TODO creare manpage per questo file
# TODO capire come fare ad eseguire i test alla creazione del pacchetto deb

# TODO rivedere i messaggi di log, decidere se usare %-formatting
# oppure https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles
# usando StyleAdapter

script_path = os.path.dirname(os.path.realpath(__file__))
main_return_code = config.RET_CODE_OK

# parsing input arguments
parser = argparse.ArgumentParser(description='Thermod: programmable thermostat daemon for smart-heating automation')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(PROGRAM_VERSION))
parser.add_argument('-C', '--config', action='store', default=None, help='read configuration from CONFIG file (full path)')
parser.add_argument('-D', '--debug', action='store_true', help='start the daemon in debug mode')
parser.add_argument('-F', '--foreground', action='store_true', help='start the daemon in foreground')
parser.add_argument('-L', '--log', action='store', default=None, help='write log messages to LOG file (full path)')
parser.add_argument('-P', '--pid', action='store', default='/run/thermod.pid', help='where to create PID file if required (full path)')
parser.add_argument('--systemd', action='store_true', help='use only if started by systemd')
args = parser.parse_args()

# setting up logging system
logger = logging.getLogger(config.logger_base_name)
logger.setLevel(logging.INFO)

if args.debug:
    logger.setLevel(logging.DEBUG)

if args.foreground and not args.systemd:
    console = logging.StreamHandler(sys.stdout)
    console.setFormatter(logging.Formatter(fmt=config.logger_fmt_msg,
                                           datefmt=config.logger_fmt_time,
                                           style=config.logger_fmt_style))
    logger.addHandler(console)
    logger.debug('executing in foreground, logging to console')
else:
    syslog = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_DAEMON)
    syslog.setFormatter(logging.Formatter(fmt=config.logger_fmt_msg_syslog,
                                          style=config.logger_fmt_style))
    logger.addHandler(syslog)
    logger.debug('executing in background, logging to syslog (daemon)')

if args.log:
    logfile = None
    
    try:
        logfile = logging.FileHandler(args.log, mode='a')
    
    except PermissionError as pe:
        logger.warning('cannot write log to `%s`: %s', args.log, pe)
        
        try:
            (_fd, _path) = tempfile.mkstemp(prefix='tmp_thermod', suffix='.log', test=True)
            _fd.close()
            
            logger.info('the log will be written to temp file `%s`', _path)
            logfile = logging.FileHandler(_path, mode='w')
        
        except Exception as e:
            logger.error('cannot write logfile: %s', e)
            logger.info('the daemon will start without logfile')
    
    if logfile:
        logfile.setFormatter(logging.Formatter(fmt=config.logger_fmt_msg,
                                               datefmt=config.logger_fmt_datetime,
                                               style=config.logger_fmt_style))
        logger.addHandler(logfile)


# reading configuration files
(cfg, main_return_code) = config.read_config_files(args.config)

if main_return_code != config.RET_CODE_OK:
    logger.info('closing daemon with return code {}'.format(main_return_code))
    exit(main_return_code)


# parsing main settings
settings = config.parse_main_settings(cfg)
debug = settings.debug or args.debug

if main_return_code != config.RET_CODE_OK:
    logger.info('closing daemon with return code {}'.format(main_return_code))
    exit(main_return_code)


# if executed in foreground we ignore the 'enabled' setting in config file
enabled = settings.enabled or args.foreground

# if the daemon is disabled we exit immediately
if not enabled:
    logger.info('daemon disabled in configuration file, exiting...')
    exit(config.RET_CODE_DAEMON_DISABLED)


# if mail server is present in configuration file, a new SMTPHandler is created
if settings.email['server']:
    maillog = SMTPHandler(settings.email['server'],
                          settings.email['sender'],
                          settings.email['recipients'],
                          settings.email['subject'],
                          settings.email['credentials'])
    
    maillog.setFormatter(logging.Formatter(fmt=config.logger_fmt_msg_maillog,
                                           datefmt=config.logger_fmt_datetime,
                                           style=config.logger_fmt_style))
    
    maillog.setLevel(logging.WARNING)
    logger.addHandler(maillog)


# setting again the debug level if requested in configuration file
if debug:
    logger.setLevel(logging.DEBUG)


# initializing base objects
try:
    logger.debug('creating base objects')
    
    if settings.scripts['on'] == 'PiPinsRelay':  # checking only 'on' script is enough
        heating = rpi.PiPinsRelayHeating(settings.heating['pins'],
                                         (rpi.HIGH if settings.heating['level']=='h' else rpi.LOW))
    
    # An `elif` can be added with additional Raspberry Pi heating class
    # once they will be created.
    else:
        heating = ScriptHeating(settings.scripts['on'],
                                settings.scripts['off'],
                                settings.scripts['status'],
                                debug)
    
    if settings.scripts['thermometer'] == 'PiAnalogZero':
        # The user choose to use an internal class for Raspberry Pi thermometer
        # instead of an external script.
        thermometer = rpi.PiAnalogZeroThermometer(settings.thermometer['channels'],
                                                  settings.thermometer['multiplier'],
                                                  settings.thermometer['shift'])
    
    # An `elif` can be added with additional Raspberry Pi thermometers class
    # once they will be created.
    else:
        thermometer = ScriptThermometer(settings.scripts['thermometer'], debug)
    
    timetable = TimeTable(settings.tt_file, heating, thermometer)

except ScriptError as se:
    main_return_code = config.RET_CODE_SCRIPT_INIT_ERR
    logger.critical('error accessing the script `%s`: %s', se.script, se)

except FileNotFoundError as fnfe:
    main_return_code = config.RET_CODE_TT_NOT_FOUND
    logger.critical('cannot find timetable file `%s`', settings.tt_file)

except PermissionError as pe:
    main_return_code = config.RET_CODE_TT_READ_ERR
    logger.critical('cannot read timetable file `%s`', settings.tt_file)

except OSError as oe:
    main_return_code = config.RET_CODE_TT_OTHER_ERR
    logger.critical('error accessing timetable file `%s`: %s', settings.tt_file, oe)

except ValueError as ve:
    main_return_code = config.RET_CODE_TT_INVALID_SYNTAX
    logger.critical('timetable file is not in JSON format or has syntax errors: %s', ve)

except ValidationError as jve:
    main_return_code = config.RET_CODE_TT_INVALID_CONTENT
    logger.critical('invalid element %s in timetable file: %s', list(jve.path), jve.message)

except (HeatingError, ThermometerError) as pie:
    main_return_code = config.RET_CODE_PI_INIT_ERR
    logger.critical('cannot access Raspberry Pi: %s', pie)

except Exception as e:
    main_return_code = config.RET_CODE_INIT_ERR
    logger.critical('error during daemon initialization: %s', e, exc_info=True)

except KeyboardInterrupt:
    main_return_code = config.RET_CODE_KEYB_INTERRUPT

except:
    main_return_code = config.RET_CODE_INIT_ERR
    logger.critical('unknown error during daemon initialization, no more details', exc_info=True)

else:
    main_return_code = config.RET_CODE_OK
    logger.debug('base objects created')
    
finally:
    if main_return_code != config.RET_CODE_OK:
        logger.info('closing daemon with return code {}'.format(main_return_code))
        exit(main_return_code)


def shutdown(signum=None, frame=None, exitcode=config.RET_CODE_OK):
    global enabled, main_return_code
    
    logger.info('shutdown requested')
    with timetable.lock:
        enabled = False
        timetable.lock.notify()
    
    # setting the global return code
    main_return_code = exitcode


def reload_timetable(signum=None, frame=None):
    logger.info('timetable reload requested')
    with timetable.lock:
        try:
            timetable.reload()
            timetable.lock.notify()
        
        except OSError as oe:
            logger.warning('cannot reload timetable file `%s`, old settings '
                           'remain unchanged: %s', timetable.filepath, oe)
        
        except ValidationError as jsve:
            logger.warning('cannot reload settings, timetable file contains '
                           'invalid data in element %s: %s', list(jsve.path),
                           jsve.message)
        
        except ValueError as ve:
            logger.warning('cannot reload settings, timetable file contains '
                           'invalid data: %s', ve)
        
        except Exception as e:
            logger.warning('error while reloading timetable, old settings '
                           'remain unchanged: %s', e)


def thermostat_cycle():
    """The main cycle of temperature checking.
    
    Periodically checks the temperature and switch on/off the heating
    accordingly.
    """
    
    global main_return_code
    logger.info('daemon started (%s)', PROGRAM_VERSION)
    
    try:
        # starting control socket
        socket = ControlThread(timetable, settings.host, settings.port)
        socket.start()
    
    except OSError as oe:
        # probably the socket address is already in use
        logger.critical('cannot start control socket: %s', oe)
        main_return_code = config.RET_CODE_SOCKET_PORT_ERR
    
    except Exception as e:
        logger.critical('cannot start control socket: %s', e, exc_info=True)
        main_return_code = config.RET_CODE_SOCKET_START_ERR

    except KeyboardInterrupt:
        main_return_code = config.RET_CODE_KEYB_INTERRUPT
    
    except:
        logger.critical('unkown error starting control socket', exc_info=True)
        main_return_code = config.RET_CODE_SOCKET_START_ERR
    
    else:
        try:
            logger.info('the heating is currently %s', (heating.is_on() and 'ON' or 'OFF'))
            
        except Exception as e:
            # We report the error as a severe error but we do nothing because
            # it can be a transient error, if it isn't transient, the error
            # will appears again in the hereafter "while" cycle and it will
            # be managed there.
            logger.error('cannot query the heating to retrieve current status: %s', e)
            
        except KeyboardInterrupt:
            shutdown(exitcode=config.RET_CODE_KEYB_INTERRUPT)
            
        except:
            logger.critical('unknown error during first query to the heating', exc_info=True)
            shutdown(exitcode=config.RET_CODE_RUN_HEATING_ERR)
        
        # The following variable is needed to print info messages only
        # when no timeout has occurred, that means that someone has changed
        # some settings.
        cycle_timeout = False
        
        # the real cycle of temperature checking
        while enabled:
            try:
                with timetable.lock:
                    try:
                        should_be_on = timetable.should_the_heating_be_on()
                        _msg = ('status: {!r}, '
                                'current: {:.1f}, '
                                'target: {:.1f}').format(
                                            should_be_on.status,
                                            should_be_on.current_temperature,
                                            should_be_on.target_temperature)
                        
                        if should_be_on:
                            if not heating.is_on():
                                heating.switch_on()
                                logger.info('heating switched ON (%s)', _msg)
                            elif not cycle_timeout:
                                logger.info('heating already ON (%s)', _msg)
                            else:
                                logger.debug('heating already ON (%s)', _msg)
                        else:
                            if heating.is_on():
                                heating.switch_off()
                                logger.info('heating switched OFF (%s)', _msg)
                            elif not cycle_timeout:
                                logger.info('heating already OFF (%s)', _msg)
                            else:
                                logger.debug('heating already OFF (%s)', _msg)
                    
                    except ValidationError as ve:
                        # The internal settings must be valid otherwise an error
                        # should have been already catched in other sections of
                        # the daemon, even if new settings are set from
                        # socket connection. So we print a critical error and
                        # we close the daemon.
                        logger.critical('invalid element %s in timetable file: %s', list(ve.path), ve)
                        shutdown(exitcode=config.RET_CODE_RUN_INVALID_STATE)
                    
                    except JsonValueError as jve:
                        # A strange value has been set somewhere and the daemon
                        # didn't catch the appropriate exception. We print a
                        # critical message and we close the daemon.
                        logger.critical(jve)
                        shutdown(exitcode=config.RET_CODE_RUN_INVALID_VALUE)
                    
                    except ScriptError as se:
                        # One of the external scripts reported an error, we
                        # print it as a severe error but we leave the daemon
                        # running even if probably it is not fully functional.
                        logger.error('the script `%s` reported the following '
                                     'error: %s', se.script, se)
                    
                    except ThermometerError as te:
                        logger.error('error from thermometer: %s', te)
                        logger.debug(te.suberror)
                    
                    except HeatingError as he:
                        logger.error('error from heating: %s', he)
                        logger.debug(he.suberror)
                    
                    except Exception as e:
                        # An unknown error occurred somewhere
                        logger.critical('unknown error occurred: %s', e, exc_info=True)
                        shutdown(exitcode=config.RET_CODE_RUN_OTHER_ERR)
                    
                    # A shutdown may have been requested before reaching
                    # this point and in such situation we don't have to
                    # wait for a notify, simply go on and exit the cycle.
                    if enabled:
                        # We suspend the process and wait to recheck the temperature.
                        # The 'wait' method returns False on timeout, thus we
                        # negate it to have cycle_timeout equal True when a
                        # timeout has occurred.
                        cycle_timeout = not timetable.lock.wait(settings.interval)
            
            except KeyboardInterrupt:
                shutdown(exitcode=config.RET_CODE_KEYB_INTERRUPT)
            
            except:
                logger.critical('unknown error during normal operation', exc_info=True)
                shutdown(exitcode=config.RET_CODE_RUN_OTHER_ERR)
    
    finally:    
        logger.debug('stopping daemon')
        
        try:
            with timetable.lock:
                socket.stop()
                socket.join(10)
        
        except NameError:
            # The socket doesn't exist because and error has occurred during
            # its creation, the error has already been logged so we simply
            # ignore this exception. Or, maybe, a KeyboardInterrupt has been
            # raised just before the creation of the socket and the socket
            # still doesn't exist.
            pass
        
        except RuntimeError:
            # Probably this exception is raised by the join() method because
            # an error has occurred during socket starting. The error has
            # already been logged and we simply ignore this exception.
            pass
        
        except Exception as e:
            logger.error('unexpected error stopping control socket: %s', e, exc_info=True)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SOCKET_STOP_ERR
        
        except KeyboardInterrupt:
            # We are already shutting down, no other operations required
            pass
        
        except:
            logger.error('unknown error stopping control socket', exc_info=True)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SOCKET_STOP_ERR
        
        try:
            if heating.is_on():
                heating.switch_off()
                logger.info('heating switched OFF')
        
        except ScriptError as se:
            logger.warning('the script `%s` reported the following error '
                           'while shutting down the daemon: %s', se.script, se)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SHUTDOWN_SWITCHOFF_ERR
        
        except HeatingError as he:
            logger.warning('error from heating while shutting down the '
                           'daemon: %s', he)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SHUTDOWN_SWITCHOFF_ERR
        
        except Exception as e:
            logger.error('error in switching off the heating during '
                         'daemon shutdown: %s', e, exc_info=True)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SHUTDOWN_OTHER_ERR
        
        except KeyboardInterrupt:
            # We are already shutting down, no other operations required
            pass
        
        except:
            logger.error('unknown error in switching off the heating during '
                         'daemon shutdown', exc_info=True)
            
            # We set a new exit code only if this is the first error
            # otherwise we leave the original error exit code.
            if main_return_code == config.RET_CODE_OK:
                main_return_code = config.RET_CODE_SHUTDOWN_OTHER_ERR
    
    logger.info('daemon stopped')


# main
if args.foreground or args.systemd:
    logger.debug('starting daemon in %s', (args.systemd and 'background by systemd' or 'foreground'))
    
    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGHUP, reload_timetable)
    
    thermostat_cycle()

else:
    logger.debug('starting daemon in background')
    
    daemon = DaemonContext()
    daemon.pidfile = pidfile.PIDLockFile(args.pid)
    daemon.signal_map = {signal.SIGTERM: shutdown,
                         signal.SIGHUP: reload_timetable}
    
    if args.log:
        daemon.files_preserve = [logfile.stream]
    
    try:
        with daemon:
            thermostat_cycle()
    
    except lockfile.LockFailed:
        logger.critical('cannot create PID file {}'.format(daemon.pidfile.path))
        main_return_code = config.RET_CODE_PID_FILE_ERROR
    
    except lockfile.AlreadyLocked:
        logger.critical('PID file {} is already locked'.format(daemon.pidfile.path))
        main_return_code = config.RET_CODE_PID_FILE_ERROR
    
    except lockfile.LockError:
        logger.critical('unkown error writing PID file {}'.format(daemon.pidfile.path))
        main_return_code = config.RET_CODE_PID_FILE_ERROR


# closing daemon
if main_return_code != config.RET_CODE_OK:
    logger.info('closing daemon with return code {}'.format(main_return_code))

exit(main_return_code)

# vim: fileencoding=utf-8 tabstop=4 shiftwidth=4 expandtab
