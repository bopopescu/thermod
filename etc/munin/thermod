#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Plugin to monitor Thermod temperatures and status.

The printed values are the current and target temperatures as reported
by Thermod socket and the current status of the heating displayed with value
1 for heating ON and value 0 for heating OFF.

If Thermod is not listening on default host/port, set the custom values in
the environment variables `socket_host` and `socket_port`.

These are the environment variables accepted by this pluging:
 - `socket_host` the host address or name where to contact Thermod (default to 'localhost');
 - `socket_port` the port where to contact Thermod daemon (default to 4344)
 - `target_warning` warning value for target temperature
 - `target_critical` critical value for target temperature
 - `current_warning` warning value for current temperature
 - `current_critical` critical value for current temperature

@author:     Simone Rossetto
@copyright:  2016 Simone Rossetto
@license:    GNU General Public License v3
@contact:    simros85@gmail.com
"""

import os
import sys
import requests
from thermod import config

__version__ = '1.0.0'
__date__ = '2016-04-24'
__updated__ = '2016-04-25'


# default return code
main_return_code = 0

# check input parameters
if len(sys.argv) > 1:
    if sys.argv[1] == 'autoconf':
        print('yes')
        exit(main_return_code)
    
    elif sys.argv[1] == 'config':
        target_warning = os.getenv('target_warning', None)
        target_critical = os.getenv('target_critical', None)
        current_warning = os.getenv('current_warning', None)
        current_critical = os.getenv('current_critical', None)
        
        print('''\
graph_title Thermod temperatures and status
graph_vlabel degrees
graph_scale no
graph_category sensors
graph_order current target status
graph_info This graph shows the current status of the heating as reported by Thermod with current room temperature and target temperatrure.
target.label Target temperature
target.info The target temperature currently active in Thermod.
{target_warning}\
{target_critical}\
current.label Current temperature
current.info The current room temperature as reported by Thermod.
{current_warning}\
{current_critical}\
status.label Heating status (ON/OFF)
status.info The current status of the heating (value 1 means heating ON, value 0 means heating OFF).
status.min 0
status.max 1
status.draw AREA
status.colour COLOUR9'''.format(
    target_warning=('target.warning {}\n'.format(target_warning) if target_warning else ''),
    target_critical=('target.critical {}\n'.format(target_critical) if target_critical else ''),
    current_warning=('current.warning {}\n'.format(current_warning) if current_warning else ''),
    current_critical=('current.critical {}\n'.format(current_critical) if current_critical else '')))
        
        exit(main_return_code)

# get custom variables
host = os.getenv('socket_host', config.SOCKET_DEFAULT_HOST)
port = os.getenv('socket_port', config.SOCKET_DEFAULT_PORT)

# retrieve data from Thermod
try:
    req = requests.get('http://{host}:{port}/heating'.format(host=host, port=port))
    
    if req.status_code == 200:
        heating = req.json()
    else:
        raise requests.HTTPError('unaccepted status code returned from Thermod')

except:
    main_return_code = 1
    heating = {'target': 'U',
               'temperature': 'U',
               'status': 'U'}

# print results
print('''\
target.value {}
current.value {}
status.value {}'''.format(heating['target'],
                            heating['temperature'],
                            heating['status']))

exit(main_return_code)

# vim: syntax=python fileencoding=utf-8
