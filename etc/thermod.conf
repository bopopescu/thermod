# Thermod configuration file
#
# All values must be written without quotes and are case sensitive.
# After editing this file, the daemon must be restarted! The SIGHUP signal
# can be used only for reloading the timetable JSON file.
#

[global]
enabled = false
debug = false
timetable = /etc/thermod/timetable.json
interval = 30

# Internal working mode to take into account thermal inertia. Set to one of
# the following values:
#   1: switch on at target-diff, switch off at target+diff
#   2: switch on at target-2*diff, switch off at target
#   3: switch on at target-2*diff, switch off at target-diff
# In case of cooling the three modes behaves the opposite:
#   1: switch on at target+diff, switch off at target-diff
#   2: switch on at target+2*diff, switch off at target
#   3: switch on at target+2*diff, switch off at target+diff
mode = 2

[heating]
# Heating interface. The heating can be managed with external scripts
# or using internal functions for Raspberry Pi hardware. The following
# setting can have only two values: scripts or PiPinsRelay.
heating = scripts

[heating/scripts]
# Full path to heating scripts. One script to switch on the heating, one to
# switch if off and the last one to query the current status.
# See `samples` folder for some example scripts.
# Required only if `heating` setting is set to 'scripts'.
switchon = /etc/thermod/switch-heating --on -j -s -q
switchoff = /etc/thermod/switch-heating --off -j -s -q
status = /etc/thermod/switch-heating --status -j -s -q

[heating/PiPinsRelay]
# List of BCM GPIO pins (comma separated) connected to the heating.
# Required only if `heating` setting is set to 'PiPinsRelay'.
pins = 23

# Trigger level for selected GPIO pins to switch on the heating.
# Two values are valid: high or low (case insensitive).
# Required only if `heating` setting is set to 'PiPinsRelay'.
switch_on_level = low

[cooling]
# Cooling system interface. The cooling system can be managed in the same
# way of the heating, so the same settings are available.
# If the exact same hardware is used for both heating and cooling, the
# following setting must be set to 'heating'. If the cooling is not available
# left the following setting empty. In both these cases all the other cooling
# settings are ignored.
cooling = heating

[cooling/scripts]
# Full path to cooling scripts. Same meaning of `heating/scripts` section.
# Required only if `cooling` setting is set to 'scripts'.
switchon = /etc/thermod/switch-cooling --on -j -s -q
switchoff = /etc/thermod/switch-cooling --off -j -s -q
status = /etc/thermod/switch-cooling --status -j -s -q

[cooling/PiPinsRelay]
# List of BCM GPIO pins (comma separated) connected to the cooling.
# Required only if `cooling` setting is set to 'PiPinsRelay'.
pins = 24

# Trigger level for selected GPIO pins to switch on the cooling.
# Two values are valid: high or low (case insensitive).
# Required only if `cooling` setting is set to 'PiPinsRelay'.
switch_on_level = low

[thermometer]
# Full path to an external script (that return the current temperature) or
# the value PiAnalogZero if the temperature is retrieved from an AnalogZero
# board connected to a Raspberry Pi.
# See `samples` folder for an example script.
thermometer = /etc/thermod/get-temperature

# Degree scale of the thermometer. Two values are valid: celsius or fahrenheit.
scale = celsius

# Temperature calibration parameters. The first parameter contains a list of
# reference temperatures whereas the second the corresponding values read by
# the thermometer. Thermod will use these two lists to compute a transformation
# function to calibrate the thermometer. The two lists must have the same number
# of elements and must have at least 2 elements each (better with 6 or more
# elements). To disable the calibration or to get the values for `t_raw` list,
# leave `t_raw` itself empty.
t_ref = 15.0, 17.0, 18.0, 19.0, 20.0, 21.0, 23.0
t_raw = 

# Enable a similarity check for every read temperature in order to identify
# spikes due to faulty hardware or abnormal reading.
similarity_check = true

# Advanced parameter: change it only if you know what you are doing!
# Number older temperatures to keep to perform the similarity check.
# Required only if `similarity_check` is set to true.
similarity_queuelen = 12

# Advanced parameter: change it only if you know what you are doing!
# The maximum allowed difference from new temperatures to be considered similar
# to older values. Required only if `similarity_check` is set to true.
similarity_delta = 3.0

# Use the averaging task to reduce fluctuations in noisy thermometers.
avgtask = true

# Advanced parameter: change it only if you know what you are doing!
# Temperature reading interval for the averaging task (in seconds, minimum 1 second).
# Required only if `avgtask` is set to true.
avgint = 3

# Advanced parameter: change it only if you know what you are doing!
# The reported temperature is the average of raw temperatures recorded during
# this time (in minutes, minimum two times the global parameter `interval`, be
# aware that `interval` is in seconds, this value is in minutes).
# Required only if `avgtask` is set to true.
avgtime = 6

# Advanced parameter: change it only if you know what you are doing!
# The percentage of temperatures to be skipped during the average process. The
# half of this value from the greatest temperatures and the other half form
# the lowest. This value must be between 0 and 1.
# Required only if `avgtask` is set to true.
avgskip = 0.33

[thermometer/PiAnalogZero]
# Comma-separated list of AnalogZero A/D channels to read temperature from.
# Required only if `thermometer` setting is set to PiAnalogZero.
channels = 0, 1, 2

# Advanced parameter: change it only if you know what you are doing!
# Maximum standard deviation between temperatures to consider all thermometers
# valid. Required only if `thermometer` setting is set to PiAnalogZero.
stddev = 2.0

[socket]
# Host and port where to bind the control socket. Leave `host` empty if you
# want the socket to listen on any interface.
host = localhost
port = 4344

[email]
# The `server` parameter can be empty to disable email alert or can be the
# hostname of the SMTP mail server (optianally followed by port numer
# like hostname:port). If required fill the `user` and `password` settings for
# mail server. The `sender` is the full email of the sender address.
server = localhost
user = 
password = 
sender = Thermod <root@localhost>
subject = Thermod alert

[email/rcpt]
# Recipients of notification emails. Add one recipient per line, the name on
# the left side of the equal sign must be unique, otherwise the daemon will
# not start.
admin = Simone Rossetto <root@localhost>
other = other@localhost

[debug]
# Advanced parameters: change them only if you know what you are doing!
# Set to true to use fake implementations of Raspberry Pi hardware.
fake_rpi_heating = false
fake_rpi_thermometer = false
